# -*- coding: utf-8 -*-
"""LCA extractor (Les D.A)

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15GL3oEkYC-riPpgx6KQP8vuAk8CXD_7Q

# Librairies
"""

import pdfplumber
from tabula import read_pdf
import pandas as pd
from pandas import ExcelWriter
#import numpy as np

"""# Fonctions Support"""

def save_xls(list_dfs, xls_path):
    with ExcelWriter(xls_path) as writer:
        sheet_names = ['ex_consolidé', 'consolidé']
        for n, df in enumerate(list_dfs):
            df.to_excel(writer,'%s' % sheet_names[n], index=False)

def pdf_to_tables(pdf_fname):
  print(pdf_fname)
  if '.pdf' not in pdf_fname :
    pdfname_ext = pdf_fname+'.pdf'
  else :
    pdfname_ext = pdf_fname
  df = read_pdf(pdfname_ext, encoding='utf-8', pages='all', multiple_tables=True)
  print(len(df))
  print("")
  return df

def transfom_df(data_IG):
  data_info_g = data_IG.copy()
  data_info_g.index = list(range(1,len(data_info_g)+1))
  data_info_g.loc[0] = list(data_info_g.columns)
  data_info_g.columns = [str(x) for x in list(range(1,data_info_g.shape[1]+1))]
  return data_info_g.sort_index()

def extract_value(row, column, data):
  try : 
    value_ = data.loc[row, column]
    return value_
  except :
    return ' '

def extract_basic_info_text(pdf_name) :
  with pdfplumber.open(pdf_name) as pdf:
    first_page = pdf.pages[0]
    text_pdf = first_page.extract_text()
    
  dict_index = {}
  text_array = text_pdf.split('\n')
  for i,elem in enumerate(text_array) :
    
    keys = ['N° LABORATOIRE', 'DATE', 'PROFONDEUR', 'CULTURE']
    for key_ in keys :
      if key_ in elem :
        dict_index[key_] = i

  return dict_index, text_array

def extract_output_columns(data_IG_transf, pdf_name):
  dict_info_gen = {}
  #try :
  dict_index, text_array = extract_basic_info_text(pdf_name)

  n_labo = text_array[dict_index['N° LABORATOIRE']].split(':')[-1].strip()
  profondeur = text_array[dict_index['PROFONDEUR']].split(':')[-1].strip()
  culture = text_array[dict_index['CULTURE']].split(':')[-1].strip()

  dates = text_array[dict_index['DATE']]
  all_dates = [s.split(':')[-1] for s in dates.replace(' ','').split('DATE')][1:]
  
  
  data_ = data_IG_transf.copy()
  
  dict_info_gen['Client'] = ['']
  dom_prov = data_['EXPLOITANT'].values[0].split('\r')
  try : 
    dict_info_gen['Domaine'] = [dom_prov[0]]
  except :
    dict_info_gen['Domaine'] = ['']

  if len(dom_prov) > 1 :
    dict_info_gen['Commune'] = [dom_prov[1]]
  else :
    dict_info_gen['Commune'] = ['']
  
  dict_info_gen['Province'] = ['']
  dict_info_gen['Parcelle'] = ['']
  dict_info_gen['Préleveur'] = ['']
  dict_info_gen['Culture'] = [culture]
  dict_info_gen['Pays'] = ['MAROC']
  dict_info_gen['GPS_N_W'] = ['']
  dict_info_gen['Profondeur'] = [profondeur]
  dict_info_gen['N_Labo'] = [n_labo]
  dict_info_gen['Date_prélèvement'] = [all_dates[0]]
  dict_info_gen['Date_réception'] = [all_dates[1]]
  dict_info_gen['Date_fin_analyse'] = [all_dates[2]]
  dict_info_gen['Date_édition'] = [all_dates[3]]


  #dict_info_gen['GPS_W'] = [data_.loc[4, '8']]
  #dict_info_gen['Profondeur'] = ['0 à 10 cm']

  

  return pd.DataFrame.from_dict(dict_info_gen)

def extract_gran_data(data_GN_trans, data_GN_trans_2):
  columns_names = ['Argile', 'Limon fins', 'Limon grossier', 'Sable fin',
       'Sable grossier', 'Texture', 'Gravier (%)', 'Humidité Eq(%)']
      
  columns_values = list(data_GN_trans[['Unnamed: 0']].dropna().values)
  columns_values.append(data_GN_trans_2.columns[0].split('\r')[2].split('Texture')[-1])
  columns_values.append('')
  columns_values.append('')
  zip_iterator = zip(columns_names, columns_values)
  a_dictionary = dict(zip_iterator)
  data_gran = pd.DataFrame.from_dict(a_dictionary)
  return data_gran

def extract_acido_basique_2(data_sab_1_transf, data_sab_3_transf):
  #data_ = data_sab_1_transf.copy()
  data_sab_1 = data_sab_1_transf.copy()
  elem_values = data_sab_1.loc[1,'Unnamed: 1'].split('\r')
  for i in range(0, len(elem_values)) :
    if '=' in elem_values[i] :
      elem_values[i] = elem_values[i].replace('=', '')
  
  dict_sab = {}
  
  if len(elem_values) == 5 : 
    dict_sab['pH eau*'] = [elem_values[2]]
    dict_sab['pH KCl*'] = ['']
    dict_sab['Calcaire Total* (%)'] = [elem_values[0]]
    dict_sab['Calcaire Actif* (%)'] = [elem_values[1]]
    dict_sab['CaO (mg/kg)'] = [elem_values[3]]
    #dict_sab['CEC Metson (Cmol/kg)'] = [elem_values[4]]


  elif len(elem_values) == 6 :
    dict_sab['pH eau*'] = [elem_values[2]]
    dict_sab['pH KCl*'] = [elem_values[3]]
    dict_sab['Calcaire Total* (%)'] = [elem_values[0]]
    dict_sab['Calcaire Actif* (%)'] = [elem_values[1]]
    dict_sab['CaO (mg/kg)'] = [elem_values[4]]
    #dict_sab['CEC Metson (Cmol/kg)'] = [elem_values[5]]
  
  elif len(elem_values) == 4 :
    dict_sab['pH eau*'] = [elem_values[1]]
    dict_sab['pH KCl*'] = ['']
    dict_sab['Calcaire Total* (%)'] = [elem_values[0]]
    dict_sab['Calcaire Actif* (%)'] = ['']
    dict_sab['CaO (mg/kg)'] = [elem_values[2]]

  else :
    dict_sab['pH eau*'] = ['NA']
    dict_sab['pH KCl*'] = ['NA']
    dict_sab['Calcaire Total* (%)'] = ['NA']
    dict_sab['Calcaire Actif* (%)'] = ['NA']
    dict_sab['CaO (mg/kg)'] = [0]
    #dict_sab['CEC Metson (Cmol/kg)'] = ['error']

  
  

  data_3 = data_sab_3_transf.copy()
  elem_2_values = data_3.loc[1,'Unnamed: 1'].split('\r')
  
  dict_sab['A.Phosphorique Olsen (P2O5) (mg/kg)'] = [elem_2_values[0]]
  dict_sab['Potasse K20 (mg/kg)'] = [elem_2_values[1]]
  dict_sab['Magnesie MgO* (mg/kg)'] = [elem_2_values[2]]






  
  return pd.DataFrame.from_dict(dict_sab)

def extract_etat_hum_data(data_eh_trans):
  
  data_exAqu = data_eh_trans.copy()
  exAqu_values = list(data_exAqu['Unnamed: 1'].dropna().values)[1:4]
  dict_eh = {}
  
  dict_eh['Matière Organique (%)'] = [exAqu_values[0]]
  dict_eh['Azote Total'] = [exAqu_values[1]]
  dict_eh['Rapport C/N'] = [exAqu_values[2]]

  return pd.DataFrame.from_dict(dict_eh)

def extract_ext_aqu_data(data_salinite):
  data_ea_trans = data_salinite.copy()
  elements_names = ['Potassium (K)', 'Sodium (Na)', 'Magnésium (Mg)',
       'Calcium (Ca)', 'Ammonium (N-NH4)', 'Nitrate (N-NO3)', 'Phosphore (P)',
       'Chlorures (Cl)']
  chlorure = data_ea_trans.loc[1,'Unnamed: 1'].split('\r')[1]
  elemets_values = ['', '', '','', '', '','',chlorure]
  aq_dict = {"Elem":elements_names, "Valeur":elemets_values}
  data_ex_aqu = pd.DataFrame.from_dict(aq_dict)

  return data_ex_aqu.set_index('Elem').T

def extract_olig_data(data_olig_trans, data_bore_soluble):
  data_ol = data_olig_trans.copy()
  data_bore = data_bore_soluble.copy()
  
  oligo_values = data_ol.loc[1,'Unnamed: 1'].split('\r')
  bore_val = list(data_bore.columns)[1]
  if 'Unnamed' in bore_val :
    bore_val = ''
  
  #data_olig_elem = data_ol.loc[16:,['5', '7', '8', '9']].copy()
  dict_olig = {}
  dict_olig['Cuivre (mg/kg)'] = [oligo_values[0]]
  dict_olig['Manganèse (mg/kg)'] = [oligo_values[2]]
  dict_olig['Fer (mg/kg)'] = [oligo_values[3]]
  dict_olig['Zinc (mg/kg)'] = [oligo_values[1]]
  dict_olig['Bore soluble (mg/kg)'] = [bore_val]


  return pd.DataFrame.from_dict(dict_olig)

def extract_autre_elem_data(data_autre_trans, data_sab_1_transf):
  
  data_aut = data_autre_trans.copy()
  data_autre_values = data_aut.loc[1,'Unnamed: 1'].split('\r')
  dict_autre = {}
  

  dict_autre['EC 1/5 (ms/cm)'] = [data_autre_values[2]]
  

  dict_autre['Sodium Na2O (mg/kg)'] = [data_autre_values[0]]
  

  elem_values = data_sab_1_transf.loc[1,'Unnamed: 1'].split('\r')
  for i in range(0, len(elem_values)) :
    if '=' in elem_values[i] :
      elem_values[i] = elem_values[i].replace('=', '')

  dict_autre['CEC méq/100g'] = [elem_values[-1]]

  return pd.DataFrame.from_dict(dict_autre)

"""# Fonction Principale"""

def restitution_analyse_sol_labomag(pdf_name):
  all_tables = pdf_to_tables(pdf_name)
  n_ = len(all_tables)
  acido_index = 12
  elem_maj_index = 16
  olig_index = 18
  sali_index = 19
  bore_index = 14
  hum_index = 9

  if n_ == 25 : 
    data_2 = all_tables[acido_index+1].copy() #25-12.   20-7
    data_3 = all_tables[elem_maj_index+1].copy() #25-8.    20-3
    data_4 = all_tables[hum_index+1].copy()
    data_5 = all_tables[sali_index+1].copy()
    data_6 = all_tables[olig_index+1].copy()
    data_7 = all_tables[bore_index+1].copy()
  elif n_ == 20 :
    data_2 = all_tables[acido_index].copy() #25-12.   20-7
    data_3 = all_tables[elem_maj_index].copy() #25-8.    20-3
    data_4 = all_tables[hum_index].copy()
    data_5 = all_tables[sali_index].copy()
    data_6 = all_tables[olig_index].copy()
    data_7 = all_tables[bore_index].copy()



  elif n_<20 :
    data_2 = all_tables[acido_index-20+n_].copy() #25-12.   20-7
    data_3 = all_tables[elem_maj_index-20+n_].copy() #25-8.    20-3
    data_4 = all_tables[hum_index-20+n_].copy()
    data_5 = all_tables[sali_index-20+n_].copy()
    data_6 = all_tables[olig_index-20+n_].copy()
    data_7 = all_tables[bore_index-20+n_].copy()

    



  ### INFO GENERALES ###
  #print(all_tables[0])
  #data_0 = transfom_df(all_tables[0]).copy()
  data_0 = all_tables[1].copy()
  data_info_generales = extract_output_columns(data_0, pdf_name)

  ### GRANULOMETRIE ###
  data_1 = all_tables[2].copy()
  data_1_2 = all_tables[3].copy()

  data_granulo = extract_gran_data(data_1, data_1_2)

  ### STATUT ACIDO BASIQUE ###
  #data_2 = all_tables[13].copy() #25-12.   20-7
  #data_3 = all_tables[17].copy() #25-8.    20-3

  #try : 
  data_statut_AB = extract_acido_basique_2(data_2, data_3)
  #except : 
  #  data_2 = all_tables[12].copy()
  #  data_3 = all_tables[16].copy()
  #  data_statut_AB = extract_acido_basique_2(data_2, data_3)




  ### ETAT HUMIQUE ###
  #try : 
  #  data_4 = all_tables[10].copy()
  data_etat_hum = extract_etat_hum_data(data_4)
  #except : 
  #  data_4 = all_tables[9].copy()
  #  data_etat_hum = extract_etat_hum_data(data_4)

  ### EXTRAIT AQUEUX ###
  #try :
  #  data_5 = all_tables[20].copy()
  data_ext_aqu = extract_ext_aqu_data(data_5)
  #except : 
  #  data_5 = all_tables[19].copy()
  #  data_ext_aqu = extract_ext_aqu_data(data_5)

  ### OLIGO ELEMENTS ###
  #try : 
  #  data_6 = all_tables[19].copy()
  #  data_7 = all_tables[15].copy()
  data_olig_ele = extract_olig_data(data_6,data_7)
  #except :
  #  data_6 = all_tables[18].copy()
  #  data_7 = all_tables[14].copy()
  #  data_olig_ele = extract_olig_data(data_6,data_7)

  ### AUTRES ELEMENTS ###
  data_autre_ele = extract_autre_elem_data(data_5, data_2)

  all_datas = [data_info_generales.reset_index(drop=True), data_granulo.reset_index(drop=True), data_statut_AB.reset_index(drop=True),
               data_etat_hum.reset_index(drop=True), data_ext_aqu.reset_index(drop=True), data_olig_ele.reset_index(drop=True), data_autre_ele.reset_index(drop=True)]

  data_final = pd.concat(all_datas, axis=1)

  return data_final.T

"""# Execution"""
def execute_lca(filenames):
  
  num_cols = ['Argile','Limon fins', 'Limon grossier', 'Sable fin', 'Sable grossier', 'Gravier (%)', 'Humidité Eq(%)', 'pH eau*', 'pH KCl*', 'Calcaire Total* (%)', 'Calcaire Actif* (%)', 'CaO (mg/kg)',
        'A.Phosphorique Olsen (P2O5) (mg/kg)', 'Potasse K20 (mg/kg)',
        'Magnesie MgO* (mg/kg)', 'Matière Organique (%)', 'Azote Total',
        'Rapport C/N', 'Potassium (K)', 'Sodium (Na)', 'Magnésium (Mg)',
        'Calcium (Ca)', 'Ammonium (N-NH4)', 'Nitrate (N-NO3)', 'Phosphore (P)',
        'Chlorures (Cl)', 'Cuivre (mg/kg)', 'Manganèse (mg/kg)', 'Fer (mg/kg)',
        'Zinc (mg/kg)', 'Bore soluble (mg/kg)', 'EC 1/5 (ms/cm)',
        'Sodium Na2O (mg/kg)', 'CEC méq/100g']
  if len(list(filenames)) == 1 :
    file_name = list(filenames)[0]
    data_rest = restitution_analyse_sol_labomag(file_name).T.copy()
    for col in num_cols :
      try :
        data_rest[col] = data_rest[col].apply(lambda x: str(x).replace(',', '.'))
        data_rest[col] = pd.to_numeric(data_rest[col], errors='coerce')
      except : 
        pass
    data_rest['Sodium Na2O (mg/kg)'] = data_rest['Sodium Na2O (mg/kg)']*1000 #g to mg
    data_rest['CaO (mg/kg)'] = data_rest['CaO (mg/kg)']*1000 #g to mg
    #data_rest.to_excel(file_name.split('.')[0]+'_resultat.xlsx', index=False)

    return data_rest
  elif len(list(filenames)) >1 :
    datas = []
    for fn in list(filenames) :
      data_ = restitution_analyse_sol_labomag(fn).T.copy()
      datas.append(data_)
    
    data_final = pd.concat(datas)

    data_final['Fichier'] = list(filenames)
    new_data = data_final[['Fichier']+[col for col in data_final.columns if col != 'Fichier']].copy()
    
    for col in num_cols :
      try :
        new_data[col] = new_data[col].apply(lambda x: str(x).replace(',', '.'))
        new_data[col] = pd.to_numeric(new_data[col])
      except :
        print('not num')
        print(col) 
        pass
      
    new_data['Sodium Na2O (mg/kg)'] = new_data['Sodium Na2O (mg/kg)']*1000 #g to mg
    new_data['CaO (mg/kg)'] = new_data['CaO (mg/kg)']*1000 #g to mg
    #new_data.to_excel('resultat_restitution.xlsx', index=False)

    return new_data