# -*- coding: utf-8 -*-
"""Labomag extractor (Les D.A)

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18g8wwZa3EbN6j36qG181ZpEcNWRql5JU

# Librairies
"""

from tabula import read_pdf
import pandas as pd
from pandas import ExcelWriter
#import numpy as np

"""# Fonctions Support"""

def save_xls(list_dfs, xls_path):
    with ExcelWriter(xls_path) as writer:
        for n, df in enumerate(list_dfs):
            df.to_excel(writer,'sheet%s' % n)

def pdf_to_tables(pdf_fname):
  print(pdf_fname)
  if '.pdf' not in pdf_fname :
    pdfname_ext = pdf_fname+'.pdf'
  else :
    pdfname_ext = pdf_fname
  df = read_pdf(pdfname_ext, encoding='utf-8', pages='all', multiple_tables=True)
  print(len(df))
  print("")
  return df

def transfom_df(data_IG):
  data_info_g = data_IG.copy()
  data_info_g.index = list(range(1,len(data_info_g)+1))
  data_info_g.loc[0] = list(data_info_g.columns)
  data_info_g.columns = [str(x) for x in list(range(1,data_info_g.shape[1]+1))]
  return data_info_g.sort_index()

def extract_value(row, column, data):
  try : 
    value_ = data.loc[row, column]
    return value_
  except :
    return ' '

def extract_output_columns(data_IG_transf):
  data_ = data_IG_transf.copy()
  dict_info_gen = {}
  dict_info_gen['Client'] = [extract_value(0, '2', data_)]
  dict_info_gen['Domaine'] = [extract_value(1, '2', data_)]
  dict_info_gen['Commune'] = [extract_value(2, '2', data_).split('Culture')[0]]
  dict_info_gen['Province'] = [extract_value(3, '2', data_).split('Pays')[0]]
  dict_info_gen['Parcelle'] = [extract_value(4, '2', data_).split('GPS (N;W)')[0]]
  dict_info_gen['Préleveur'] = [' ']
  dict_info_gen['Culture'] = [extract_value(2, '2', data_).split('Culture')[-1]]
  dict_info_gen['Pays'] = [extract_value(3, '2', data_).split('Pays')[-1]]
  dict_info_gen['GPS_N_W'] = [extract_value(4, '2', data_).split('GPS (N;W)')[-1]]
  #dict_info_gen['GPS_W'] = [data_.loc[4, '8']]
  dict_info_gen['Profondeur'] = [extract_value(1, '4', data_)]
  dict_info_gen['N_Labo'] = [extract_value(1, '5', data_)]

  dict_info_gen['Date_prélèvement'] = [extract_value(1, '7', data_)]
  dict_info_gen['Date_réception'] = [extract_value(2, '7', data_)]
  dict_info_gen['Date_fin_analyse'] = [extract_value(3, '7', data_)]
  dict_info_gen['Date_édition'] = [extract_value(4, '7', data_)]

  return pd.DataFrame.from_dict(dict_info_gen)

def extract_gran_data(data_GN_trans):
  data_gran = data_GN_trans.loc[1:12, ['3','4']].dropna(how='all').set_index('3').T.copy()
  return data_gran

def extract_acido_basique(data_sab_1_transf, data_sab_2_transf, data_sab_3_transf):
  data_ = data_sab_1_transf.copy()
  data_sab_1 = data_.loc[[3,4,5,10,11,12],['5','6','8']].copy()
  dict_sab = {}
  dict_sab['pH eau*'] = [extract_value(3, '6', data_sab_1)]
  #dict_sab['Adequat_pH_eau'] = [extract_value(5, '8', data_sab_1)]
  dict_sab['pH KCl*'] = [extract_value(10, '6', data_sab_1)]
  #dict_sab['Adequat_pH_KCI'] = [extract_value(12, '8', data_sab_1)]

  data_2 = data_sab_2_transf.copy()
  try :
    data_sab_2 = data_2.loc[[0,3,8,11,16,17],['7','9', '10']].copy()
    dict_sab['Calcaire Total* (%)'] = [extract_value(0, '9', data_sab_2)]
    #dict_sab['Adequat_Calcaire_total'] = [extract_value(3, '10', data_sab_2)]
    dict_sab['Calcaire Actif* (%)'] = [extract_value(8, '9', data_sab_2)]
    #dict_sab['Adequat_Calc_Actif'] = [extract_value(11, '10', data_sab_2)]
    dict_sab['CaO (mg/kg)'] = [extract_value(16, '9', data_sab_2)]
    #dict_sab['Adequat_CaO'] = [' ']
  except : 
    data_sab_2 = data_2.loc[:,['5','7', '8']].copy()
    calc_tot = extract_value(0, '7', data_sab_2)
    if calc_tot in ['H1', 'h1', '', ' '] :
      calc_tot = extract_value(0, '8', data_sab_2)

    dict_sab['Calcaire Total* (%)'] = [calc_tot]
    #dict_sab['Adequat_Calcaire_total'] = [extract_value(3, '8', data_sab_2)]
    calc_actif = extract_value(11, '7', data_sab_2)
    
    if calc_actif in ['H1', 'h1', '', ' '] :
      calc_actif = extract_value(11, '8', data_sab_2)
      
    if type(calc_actif) not in [str, float, int] :
      
      calc_actif = extract_value(9, '7', data_sab_2)
    
    if type(calc_actif) not in [str, float, int] :
      
      calc_actif = extract_value(10, '8', data_sab_2)
    
   
    dict_sab['Calcaire Actif* (%)'] = [calc_actif]
    #dict_sab['Adequat_Calc_Actif'] = [extract_value(11, '8', data_sab_2)]
    cao = extract_value(19, '7', data_sab_2)
    if cao in ['H1', 'h1', '', ' ', 'NaN'] :
      cao = extract_value(19, '8', data_sab_2)

    if type(cao) not in [str, float, int] :
      cao = extract_value(17, '7', data_sab_2)
    
    if type(cao) not in [str, float, int] :
      cao = extract_value(18, '8', data_sab_2)

    dict_sab['CaO (mg/kg)'] = [cao]
    #dict_sab['Adequat_CaO'] = [' ']

  

  data_3 = data_sab_3_transf.copy()
  if 'A. Phosphorique' in list(data_3['5'].values) :
    data_sab_3 = data_3.loc[[1,2,7,11,12],['5','6','7', '8']].copy()
    dict_sab['A.Phosphorique Olsen (P2O5) (mg/kg)'] = [extract_value(1, '7', data_sab_3)]
    #dict_sab['Adequat_APhospho'] = [extract_value(1, '8', data_sab_3)]
    dict_sab['Potasse K20 (mg/kg)'] = [extract_value(7, '7', data_sab_3)]
    #dict_sab['Adequat_Potasse'] = [extract_value(7, '8', data_sab_3)]
    dict_sab['Magnesie MgO* (mg/kg)'] = [extract_value(11, '7', data_sab_3)]
    #dict_sab['Adequat_Magnesie'] = [extract_value(11, '8', data_sab_3)]

  else :
    print('here')
    data_sab_3 = data_3.loc[1:,['7','8','9', '10']].copy()
    dict_sab['A.Phosphorique Olsen (P2O5) (mg/kg)'] = [extract_value(4, '9', data_sab_3)]
    #dict_sab['Adequat_APhospho'] = [extract_value(4, '10', data_sab_3)]
    dict_sab['Potasse K20 (mg/kg)'] = [extract_value(10, '9', data_sab_3)]
    #dict_sab['Adequat_Potasse'] = [extract_value(10, '10', data_sab_3)]
    dict_sab['Magnesie MgO* (mg/kg)'] = [extract_value(14, '9', data_sab_3)]
    #dict_sab['Adequat_Magnesie'] = [extract_value(14, '10', data_sab_3)]




  
  return pd.DataFrame.from_dict(dict_sab)

def extract_acido_basique_2(data_sab_1_transf, data_sab_2_transf, data_sab_3_transf):
  data_ = data_sab_1_transf.copy()
  data_sab_1 = data_.loc[[3,4,5,10,11,12],['5','6','8']].copy()
  dict_sab = {}
  dict_sab['pH eau*'] = [extract_value(3, '6', data_sab_1)]
  #dict_sab['Adequat_pH_eau'] = [extract_value(5, '8', data_sab_1)]
  dict_sab['pH KCl*'] = [extract_value(10, '6', data_sab_1)]
  #dict_sab['Adequat_pH_KCI'] = [extract_value(12, '8', data_sab_1)]

  data_2 = data_sab_2_transf.copy()
  try :
    data_sab_2 = data_2.loc[[0,3,8,11,16,17],['7','9', '10']].copy()
    dict_sab['Calcaire Total* (%)'] = [extract_value(0, '9', data_sab_2)]
    #dict_sab['Adequat_Calcaire_total'] = [extract_value(3, '10', data_sab_2)]
    dict_sab['Calcaire Actif* (%)'] = [extract_value(8, '9', data_sab_2)]
    #dict_sab['Adequat_Calc_Actif'] = [extract_value(11, '10', data_sab_2)]
    dict_sab['CaO (mg/kg)'] = [extract_value(16, '9', data_sab_2)]
    #dict_sab['Adequat_CaO'] = [' ']
  except : 
    data_sab_2 = data_2.loc[:,['5','7', '8']].copy()
    values = list(data_sab_2['7'].dropna().values)
    if 'H1' in values : 
      values = list(data_sab_2['8'].dropna().values)
    
    if len(values) == 3 :
      calc_tot = values[0]
      calc_actif = values[1]
      cao = values[2]

      dict_sab['Calcaire Total* (%)'] = [calc_tot]
      dict_sab['Calcaire Actif* (%)'] = [calc_actif]
      dict_sab['CaO (mg/kg)'] = [cao]

    else :
      dict_sab['Calcaire Total* (%)'] = [' ']
      dict_sab['Calcaire Actif* (%)'] = [' ']
      dict_sab['CaO (mg/kg)'] = [' ']





  data_3 = data_sab_3_transf.copy()
  '''for col in data_3.columns :
    if 'A. Phosphorique' in list(data_3[col].values) :
      print("----")
      print(col)
      c_0 = str(int(col)+2)'''
  
  if 'A. Phosphorique' in list(data_3['5'].values) :
    data_sab_3 = data_3.loc[[1,2,7,11,12],['5','6','7', '8']].copy()
    i_0 = 1
    
    dict_sab['A.Phosphorique Olsen (P2O5) (mg/kg)'] = [extract_value(i_0, '7', data_sab_3)]
    dict_sab['Potasse K20 (mg/kg)'] = [extract_value(i_0+6, '7', data_sab_3)]
    dict_sab['Magnesie MgO* (mg/kg)'] = [extract_value(i_0+6+4, '7', data_sab_3)]

  elif 'A. Phosphorique' in list(data_3['7'].values)  :
    print('here 1')
    i_0 = 4
    data_sab_3 = data_3.loc[1:,['7','8','9', '10']].copy()
    dict_sab['A.Phosphorique Olsen (P2O5) (mg/kg)'] = [extract_value(i_0, '9', data_sab_3)]
   
    dict_sab['Potasse K20 (mg/kg)'] = [extract_value(i_0+6, '9', data_sab_3)]
    
    dict_sab['Magnesie MgO* (mg/kg)'] = [extract_value(i_0+10, '9', data_sab_3)]
   
  else:
    print('here 2')
    i_0 = 22
    data_sab_3 = data_3.loc[1:,['10','11','12', '13']].copy()
    dict_sab['A.Phosphorique Olsen (P2O5) (mg/kg)'] = [extract_value(i_0, '12', data_sab_3)]
    dict_sab['Potasse K20 (mg/kg)'] = [extract_value(i_0+6, '12', data_sab_3)]
    dict_sab['Magnesie MgO* (mg/kg)'] = [extract_value(i_0+10, '12', data_sab_3)]




  
  return pd.DataFrame.from_dict(dict_sab)

def extract_etat_hum_data(data_eh_trans):
  index_ini = list(data_eh_trans.loc[data_eh_trans['1']== 'Etat humique (%)'].index)[0]
  if index_ini > 0 :
    data_exAqu = data_eh_trans.iloc[index_ini:,].reset_index(drop=True).copy()
  else :
    data_exAqu = data_eh_trans.copy()
  data_ex_aqu = data_exAqu.loc[[1,3,7,8,11,12,13],['1','2','3', '4']].copy()
  dict_eh = {}
  mo= extract_value(1, '1', data_ex_aqu).split('H1')[-1]
  if mo in ['', ' ', 'NaN']:
    mo = extract_value(1, '2', data_ex_aqu)
  if mo in ['', ' ', 'NaN']:
    mo = extract_value(1, '3', data_ex_aqu)
  if mo in ['', ' ', 'NaN']:
    mo = extract_value(1, '4', data_ex_aqu)

  dict_eh['Matière Organique (%)'] = [mo]
  #dict_sab['Adequat_MO'] = [extract_value(3, '4', data_ex_aqu)]
  dict_eh['Azote Total'] = [extract_value(7, '3', data_ex_aqu)]
  #dict_sab['Adequat_Azote_tot'] = [extract_value(12, '4', data_ex_aqu)]
  dict_eh['Rapport C/N'] = [extract_value(11, '3', data_ex_aqu)]
  #dict_sab['Adequat_Rapp_C/N'] = [extract_value(13, '4', data_ex_aqu)]

  return pd.DataFrame.from_dict(dict_eh)

def extract_ext_aqu_data(data_ea_trans):
  index_ini = list(data_ea_trans[data_ea_trans['1']=='Potassium (K)'].index)[0]
  if index_ini > 0 :
    data_ex = data_ea_trans.iloc[index_ini:index_ini+11].reset_index(drop=True).copy()
  else :
    data_ex = data_ea_trans.iloc[16:27].reset_index(drop=True).copy()

  if data_ex['2'].isna().sum() > data_ex['3'].isna().sum() :
    data_ex_aqu = data_ex[['1','3', '4']].dropna(how='all').copy()
  else :
    data_ex_aqu = data_ex[['1','2','4']].dropna(how='all').copy()

  data_ex_aqu.columns = ['Elem', 'Valeur', 'Adéquat']
  return data_ex_aqu[['Elem','Valeur']].set_index('Elem').T

def extract_olig_data(data_olig_trans):
  index_ini = list(data_olig_trans.loc[data_olig_trans['1']== 'Etat humique (%)'].index)[0]
  if index_ini > 0 :
    print('index_ini', index_ini)
    data_ol = data_olig_trans.iloc[index_ini:,].reset_index(drop=True).copy()
  else :
    data_ol = data_olig_trans.copy()
  
  for col in data_ol.columns :
    if 'Oligo-éléments' in list(data_ol[col].values) :
      print("----")
      print(col)
      c_0 = str(int(col)+2)

  if 'Oligo-éléments' in list(data_ol['5'].values) :
    data_olig_elem = data_ol.loc[16:,['5', '7', '8', '9']].copy()
    dict_olig = {}
    dict_olig['Cuivre (mg/kg)'] = [extract_value(17, '7', data_olig_elem)]
    dict_olig['Manganèse (mg/kg)'] = [extract_value(22, '7', data_olig_elem)]
    dict_olig['Fer (mg/kg)'] = [extract_value(28, '7', data_olig_elem)]
    dict_olig['Zinc (mg/kg)'] = [extract_value(36, '7', data_olig_elem)]
    dict_olig['Bore soluble (mg/kg)'] = [extract_value(43, '7', data_olig_elem)]

  elif 'Oligo-éléments' in list(data_ol['7'].values)  :
    data_olig_elem = data_ol.loc[16:,['7', '8', '9', '10']].copy()
    dict_olig = {}
    dict_olig['Cuivre (mg/kg)'] = [extract_value(17, '9', data_olig_elem)]
    dict_olig['Manganèse (mg/kg)'] = [extract_value(22, '9', data_olig_elem)]
    dict_olig['Fer (mg/kg)'] = [extract_value(28, '9', data_olig_elem)]
    dict_olig['Zinc (mg/kg)'] = [extract_value(36, '9', data_olig_elem)]
    dict_olig['Bore soluble (mg/kg)'] = [extract_value(43, '9', data_olig_elem)]
  
  else  :
    data_olig_elem = data_ol.loc[16:,['10', '11', '12', '13']].copy()
    print(data_olig_elem)
    dict_olig = {}
    dict_olig['Cuivre (mg/kg)'] = [extract_value(17, '12', data_olig_elem)]
    dict_olig['Manganèse (mg/kg)'] = [extract_value(22, '12', data_olig_elem)]
    dict_olig['Fer (mg/kg)'] = [extract_value(28, '12', data_olig_elem)]
    dict_olig['Zinc (mg/kg)'] = [extract_value(36, '12', data_olig_elem)]
    dict_olig['Bore soluble (mg/kg)'] = [extract_value(43, '12', data_olig_elem)]


  

  return pd.DataFrame.from_dict(dict_olig)

def extract_autre_elem_data(data_autre_trans):
  index_ini = list(data_autre_trans.loc[data_autre_trans['1']== 'Etat humique (%)'].index)[0]
  if index_ini > 0 :
    data_aut = data_autre_trans.iloc[index_ini:,].reset_index(drop=True).copy()
  else :
    data_aut = data_autre_trans.copy()
  data_autre_elem = data_aut.loc[30:,['1','2', '3','4']].copy()
  dict_autre = {}
  ec_15 = str(extract_value(32, '1', data_autre_elem)).split('H1')[-1]
  if ec_15 in ['nan','', ' ']:
    ec_15 = extract_value(32, '2', data_autre_elem)
  if ec_15 in ['nan','', ' ']:
    ec_15 = extract_value(32, '3', data_autre_elem)

  dict_autre['EC 1/5 (ms/cm)'] = [ec_15]
  #dict_sab['Adequat_EC'] = [extract_value(35, '4', data_autre_elem)]
  
  sodium_ = str(extract_value(39, '1', data_autre_elem)).split('H1')[-1]
  if sodium_ in ['nan','', ' ']:
    sodium_ = extract_value(39, '2', data_autre_elem)
  if sodium_ in ['nan','', ' ']:
    sodium_ = extract_value(39, '3', data_autre_elem)

  dict_autre['Sodium Na2O (mg/kg)'] = [sodium_]
  #dict_sab['Adequat_Azote_tot'] = [extract_value(39, '4', data_autre_elem)]
  cec = extract_value(47, '2', data_autre_elem)
  #print('cec', cec)
  if type(cec) not in ['str', 'int', 'float'] or cec in ['nan','', ' '] :
    
    cec =  extract_value(47, '3', data_autre_elem)

  dict_autre['CEC méq/100g'] = [cec]
  #dict_sab['Adequat_Rapp_C/N'] = [extract_value(47, '4', data_autre_elem)]

  return pd.DataFrame.from_dict(dict_autre)

"""# Fonction Principale"""

def restitution_analyse_sol_labomag(pdf_name):
  all_tables = pdf_to_tables(pdf_name)
  ### INFO GENERALES ###
  #print(all_tables[0])
  data_0 = transfom_df(all_tables[0]).copy()
  data_info_generales = extract_output_columns(data_0)

  ### GRANULOMETRIE ###
  data_1 = transfom_df(all_tables[1]).copy()
  data_granulo = extract_gran_data(data_1)

  ### STATUT ACIDO BASIQUE ###
  data_2 = transfom_df(all_tables[2]).copy()
  data_3 = transfom_df(all_tables[3]).copy()

  
  #print(data_3[['10','11','12']])
  
  #save_xls([data_3], '/Users/mac/Downloads/Sentiment-Analysis-ML-Flask-App/data_3.xlsx' )

  data_statut_AB = extract_acido_basique_2(data_1, data_2, data_3)

  ### ETAT HUMIQUE ###

  data_etat_hum = extract_etat_hum_data(data_3)

  ### EXTRAIT AQUEUX ###

  data_ext_aqu = extract_ext_aqu_data(data_3)

  ### OLIGO ELEMENTS ###
  data_olig_ele = extract_olig_data(data_3)

  ### AUTRES ELEMENTS ###
  data_autre_ele = extract_autre_elem_data(data_3)

  all_datas = [data_info_generales.reset_index(drop=True), data_granulo.reset_index(drop=True), data_statut_AB.reset_index(drop=True),
               data_etat_hum.reset_index(drop=True), data_ext_aqu.reset_index(drop=True), data_olig_ele.reset_index(drop=True), data_autre_ele.reset_index(drop=True)]

  data_final = pd.concat(all_datas, axis=1)

  return data_final.T

"""# Execution"""

def execute_labomag(filenames) :
  
  num_cols = ['Argile','Limon fins', 'Limon grossier', 'Sable fin', 'Sable grossier', 'Gravier (%)', 'Humidité Eq(%)', 'pH eau*', 'pH KCl*', 'Calcaire Total* (%)', 'Calcaire Actif* (%)', 'CaO (mg/kg)',
        'A.Phosphorique Olsen (P2O5) (mg/kg)', 'Potasse K20 (mg/kg)',
        'Magnesie MgO* (mg/kg)', 'Matière Organique (%)', 'Azote Total',
        'Rapport C/N', 'Potassium (K)', 'Sodium (Na)', 'Magnésium (Mg)',
        'Calcium (Ca)', 'Ammonium (N-NH4)', 'Nitrate (N-NO3)', 'Phosphore (P)',
        'Chlorures (Cl)', 'Cuivre (mg/kg)', 'Manganèse (mg/kg)', 'Fer (mg/kg)',
        'Zinc (mg/kg)', 'Bore soluble (mg/kg)', 'EC 1/5 (ms/cm)',
        'Sodium Na2O (mg/kg)', 'CEC méq/100g']
    

  if len(list(filenames)) == 1 :
    file_name = list(filenames)[0]
    data_rest = restitution_analyse_sol_labomag(file_name).T.copy()
    for col in num_cols :
      try :
        data_rest[col] = data_rest[col].apply(lambda x: str(x).replace(',', '.'))
        data_rest[col] = pd.to_numeric(data_rest[col], errors='coerce')
      except : 
        pass
    
    return data_rest
    
  elif len(list(filenames)) >1 :
    datas = []
    for fn in list(filenames) :
      data_ = restitution_analyse_sol_labomag(fn).T.copy()
      datas.append(data_)
    
    data_final = pd.concat(datas)

    data_final['Fichier'] = list(filenames)
    new_data = data_final[['Fichier']+[col for col in data_final.columns if col != 'Fichier']].copy()
    
    for col in num_cols :
      try :
        new_data[col] = new_data[col].apply(lambda x: x.replace(',', '.'))
        new_data[col] = pd.to_numeric(new_data[col])
      except : 
        pass
    
    new_data['Chlorures (Cl)'] = new_data['Chlorures (Cl)']*10 #mg/100g to mg/kg
    new_data['Potassium (K)'] = new_data['Potassium (K)']*10 #mg/100g to mg/kg
    new_data['Sodium (Na)'] = new_data['Sodium (Na)']*10 #mg/100g to mg/kg
    new_data['Magnésium (Mg)'] = new_data['Magnésium (Mg)']*10 #mg/100g to mg/kg
    new_data['Calcium (Ca)'] = new_data['Calcium (Ca)']*10 #mg/100g to mg/kg
    new_data['Ammonium (N-NH4)'] = new_data['Ammonium (N-NH4)']*10 #mg/100g to mg/kg
    new_data['Nitrate (N-NO3)'] = new_data['Nitrate (N-NO3)']*10 #mg/100g to mg/kg
    new_data['Phosphore (P)'] = new_data['Phosphore (P)']*10 #mg/100g to mg/kg
    

    return new_data
    #new_data.to_excel('resultat_restitution.xlsx', index=False)

  
